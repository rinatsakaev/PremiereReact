// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace PremiereReact.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20200616085640_seed")]
    partial class seed
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("PremiereServer.Models.Film", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Films");

                    b.HasData(
                        new { Id = 1, Name = "Иван Васильевич меняет профессию" },
                        new { Id = 2, Name = "Приключения Электроника" },
                        new { Id = 3, Name = "Кавказская пленница" }
                    );
                });

            modelBuilder.Entity("PremiereServer.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Quantity");

                    b.Property<int>("SessionId");

                    b.HasKey("Id");

                    b.HasIndex("SessionId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("PremiereServer.Models.Session", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("FilmId");

                    b.Property<DateTime>("StartTime");

                    b.HasKey("Id");

                    b.HasIndex("FilmId");

                    b.ToTable("Sessions");

                    b.HasData(
                        new { Id = 1, FilmId = 1, StartTime = new DateTime(2020, 6, 16, 22, 35, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 2, FilmId = 1, StartTime = new DateTime(2020, 6, 16, 19, 20, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 3, FilmId = 1, StartTime = new DateTime(2020, 6, 16, 17, 0, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 4, FilmId = 2, StartTime = new DateTime(2020, 6, 17, 19, 20, 0, 0, DateTimeKind.Unspecified) },
                        new { Id = 5, FilmId = 2, StartTime = new DateTime(2020, 6, 18, 19, 20, 0, 0, DateTimeKind.Unspecified) }
                    );
                });

            modelBuilder.Entity("PremiereServer.Models.Order", b =>
                {
                    b.HasOne("PremiereServer.Models.Session", "Session")
                        .WithMany()
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PremiereServer.Models.Session", b =>
                {
                    b.HasOne("PremiereServer.Models.Film", "Film")
                        .WithMany()
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
